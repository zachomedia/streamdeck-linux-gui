{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#installation-guides","title":"Installation Guides","text":"<ul> <li>Arch/Manjaro</li> <li>CentOS</li> <li>Fedora</li> <li>NixOS</li> <li>openSUSE</li> <li>Ubuntu/Mint</li> </ul> <p>Once you're up and running, consider installing a systemd service.</p> <p>Use the troubleshooting guide or search the issues for guidance. If you cannot find on the issue on this repository please try searching on the original at streamdeck_ui.</p>"},{"location":"#precooked-scripts","title":"Precooked Scripts","text":"<p>There are scripts for setting up streamdeck_ui on Debian/Ubuntu and Fedora.</p>"},{"location":"#help","title":"Help","text":""},{"location":"#start-without-showing-the-user-interface","title":"Start without showing the user interface","text":"<p>Note you can start streamdeck_ui without showing the configuration user interface as follows:</p> <pre><code>streamdeck -n\n</code></pre>"},{"location":"#command","title":"Command","text":"<p>Enter a value in the command field to execute a command. For example, <code>gnome-terminal</code> will launch a new terminal on Ubuntu/Fedora or <code>obs</code> will launch OBS.</p>"},{"location":"#examples-of-commands","title":"Examples of commands","text":"<p>These examples are for Ubuntu using xorg. You can use a tool like <code>xdotool</code> to interact with other applications.</p> <p>Find the window with a title starting with <code>Meet -</code> and bring it to focus. This helps if you have a Google Meet session on a tab somewhere but you lost it behind another window.</p> <pre><code>xdotool search --name '^Meet - .+$' windowactivate \n</code></pre> <p>The meeting tab must be active one if you have multiple tabs open, since the window title is set by the currently active tab.</p> <p>Find the window with a title starting with <code>Meet -</code> and then send <code>ctrl+d</code> to it. This has the effect of toggling the mute button in Google Meet.</p> <pre><code>xdotool search --name '^Meet - .+$' windowactivate --sync key ctrl+d\n</code></pre> <p>Change the system volume up (or down) by a certain percentage. Assumes you're using PulseAudio/Alsa Mixer.</p> <pre><code>amixer -D pulse sset Master 20%+\n</code></pre> <p>If you want you invoke a command that uses shell-script specific things like <code>&amp;&amp;</code> or <code>|</code>, run it via bash. This command will shift focus to firefox using the <code>wmctrl</code>, and then shifts focus to the first tab:</p> <pre><code>bash -c \"wmctrl -a firefox  &amp;&amp; xdotool key alt+1\"\n</code></pre>"},{"location":"#press-keys","title":"Press Keys","text":"<p>Simulates key press combinations (hot keys). The basic format is a group of keys, separated by a <code>+</code> sign to press simultaneously. Separate key combination groups with a <code>,</code> if additional key combinations are needed. For example, <code>alt+F4,f</code> means press and hold <code>alt</code>, followed by <code>F4</code> and then release both. Next, press and release <code>f</code>.</p> <p>You can also specify a KeyCode in hex format, for example, <code>0x74</code> is the KeyCode for <code>t</code>. This is also sometimes called the keysym value.</p> <p>You can use the <code>xev</code> tool and capture the key you are looking for. In the output, look for the keysym hex value, for example <code>(keysym 0x74, t)</code></p> <p>Use <code>comma</code> or <code>plus</code> if you want to actually output <code>,</code> or <code>+</code> respectively.</p> <p>Use <code>delay &lt;n&gt;</code> to add a delay, where <code>&lt;n&gt;</code> is the number (float or integer) of seconds to delay. If <code>&lt;n&gt;</code> is not specified, 0.5 second default is used. If <code>&lt;n&gt;</code> fails to parse as a valid number, it will result in no delay. </p>"},{"location":"#examples-of-key-presses","title":"Examples of key presses","text":"<ul> <li><code>F11</code> \u2014 Press F11. If you have focus on a browser, this will toggle full screen.</li> <li><code>alt+F4</code> \u2014 Closes the current window.</li> <li><code>ctrl+w</code> \u2014 Closes the current browser tab.</li> <li><code>cmd+left</code> \u2014 View split on left. Note <code>cmd</code> is the super key (equivalent of the Windows key).</li> <li><code>alt+plus</code> \u2014 Presses the alt and the <code>+</code> key at the same time.</li> <li><code>alt+delay+F4</code> \u2014 Press alt, then wait 0.5 seconds, then press F4. Release both.</li> <li><code>1,delay,delay,2,delay,delay,3</code> \u2014 Type 123 with a 1-second delay between key presses (using default delay).</li> <li><code>1,delay 1,2,delay 1,3</code> \u2014 Type 123 with a 1-second delay between key presses (using custom delay).</li> <li><code>e,c,h,o,space,\",t,e,s,t,\",enter</code> \u2014 Type <code>echo \"test\"</code> and press enter.</li> <li><code>ctrl+alt+0x74</code> \u2014 Opens a new terminal window. <code>0x74</code> is the KeyCode for <code>t</code>. TIP: If the character doesn't work, try using the KeyCode instead.</li> <li><code>0xffe5</code> \u2014 Toggle Caps Lock.</li> <li><code>0xffaf</code> \u2014 The <code>/</code> key on the numeric key pad.</li> </ul> <p>The standard list of keys can be found at the source.</p> <p>The <code>super</code> key (Windows key) can be problematic on some versions of Linux. Instead of using the Key Press feature, you could use the Command feature as follows. In this example, it will press <code>Super</code> and <code>4</code>, which launches application number 4 in your favorites (Ubuntu).</p> <pre><code>xdotool key \"Super_L+4\"\n</code></pre>"},{"location":"#write-text","title":"Write Text","text":"<p>A quick way of typing longer pieces of text (verbatim). Note that unlike the Press Keys action, write text does not accept special (modifier) keys. However, if you type Enter (causing a new line) it will press enter during the output.</p>"},{"location":"#examples-of-writing-text","title":"Examples of writing text","text":"<pre><code>Unfortunately that's a hard no.\nKind regards,\nJoe\n</code></pre>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Note you may need to use <code>python</code>, <code>python3</code> or <code>python3.8</code> in the commands shown below, depending on your distribution. The examples simply use <code>python</code> for simplicity's sake.</p>"},{"location":"troubleshooting/#basics","title":"Basics","text":"<p>There are four important things you need to get a working system.</p> <ol> <li>You need a working Python 3.8 or higher with pip installed.</li> <li>You need to install hidapi.</li> <li>You need a udev rule that allows access to your Stream Deck.</li> <li>You need to install streamdeck-linux-gui and all its dependencies with pip.</li> </ol>"},{"location":"troubleshooting/#key-press-and-write-text-do-not-work","title":"Key Press and Write Text do not work","text":"<p>Streamdeck uses pynput for simulating Key Presses, but it was not designed for Wayland. Generally your results will be good when using X, but it seems like most new releases of Linux are switching away from it.</p>"},{"location":"troubleshooting/#importerror","title":"ImportError","text":"<p>If you get an error such as:</p> <pre><code>ImportError: cannot import name 'QtWidgets' from 'PySide6'\n</code></pre> <p>This usually means a problem with PySide6. Try resolving with this:</p> <pre><code>python -m pip install --force-reinstall --no-cache-dir pyside6\n</code></pre>"},{"location":"troubleshooting/#no-system-tray-indicator","title":"No System Tray Indicator","text":"<p>You may receive an error like this on start-up:</p> <pre><code>qt.core.qobject.connect: QObject::connect: No such signal QPlatformNativeInterface::systemTrayWindowChanged(QScreen*)\n</code></pre> <p>This is because gnome does not provide a System Tray out the box and you will need an extension  KStatusNotifierItem/AppIndicator Support to make the system tray icon show up.</p>"},{"location":"troubleshooting/#could-not-load-the-qt-platform-plugin-xcb","title":"Could not load the Qt platform plugin \"xcb\"","text":"<p>You may get the following error:</p> <pre><code>qt.qpa.plugin: Could not load the Qt platform plugin \"xcb\" in \"\" even though it was found.\nThis application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem.\n</code></pre> <p>On Ubuntu, resolve this problem by installing:</p> <pre><code>sudo apt install libxcb-xinerama0\n</code></pre> <p>You may encounter a similar error where the cause is \"libxcb-cursor.so.0: cannot open shared object file: No such file or directory\". This can be resolved by installing the <code>libxcb-cursor0</code> package.</p> <p>On Arch, resolve this problem by installing:</p> <pre><code>sudo pacman -S qt6-base\n</code></pre> <p>You could also try <code>qt5-x11extras</code> if <code>qt6-base</code> didn't work for you.</p>"},{"location":"troubleshooting/#modulenotfounderror-no-module-named-pkg_resources","title":"ModuleNotFoundError: No module named 'pkg_resources'","text":"<p>This module is part of <code>setuptools</code> but may be missing on your system.</p> <pre><code>python -m pip install setuptools\n</code></pre>"},{"location":"contributing/acknowledgements/","title":"Contributors","text":""},{"location":"contributing/acknowledgements/#core-developers","title":"Core Developers","text":"<ul> <li>Pieter Venter (@dodgyrabbit)</li> <li>Timothy Crosley (@timothycrosley)</li> </ul>"},{"location":"contributing/acknowledgements/#notable-bug-reporters","title":"Notable Bug Reporters","text":"<p>-</p>"},{"location":"contributing/acknowledgements/#code-contributors","title":"Code Contributors","text":"<p>-</p>"},{"location":"contributing/acknowledgements/#documenters","title":"Documenters","text":"<ul> <li>@xorbital</li> <li>Chris Rogers (@chrisprad)</li> <li>@simonCor</li> <li>Afonso F. Garcia (@AfonsoFGarcia)</li> </ul> <p>A sincere thanks to everyone who helps make streamdeck_ui into a great Python3 project!</p> <p>~Timothy Crosley</p>"},{"location":"contributing/code-of-conduct/","title":"HOPE 11 -- Code of Conduct","text":"HOPE: 11 Title: Code of Conduct Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 17-August-2019 Updated: 17-August-2019"},{"location":"contributing/code-of-conduct/#abstract","title":"Abstract","text":"<p>Defines the Code of Conduct for Hug and all related projects.</p>"},{"location":"contributing/code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"contributing/code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or  advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic  address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a  professional setting</li> </ul>"},{"location":"contributing/code-of-conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"contributing/code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"contributing/code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting timothy.crosley@gmail.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Confidentiality will be maintained with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"contributing/code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"contributing/coding-standard/","title":"HOPE 8 -- Style Guide for Hug Code","text":"HOPE: 8 Title: Style Guide for Hug Code Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 19-May-2019 Updated: 17-August-2019"},{"location":"contributing/coding-standard/#introduction","title":"Introduction","text":"<p>This document gives coding conventions for the Hug code comprising the Hug core as well as all official interfaces, extensions, and plugins for the framework. Optionally, projects that use Hug are encouraged to follow this HOPE and link to it as a reference.</p>"},{"location":"contributing/coding-standard/#pep-8-foundation","title":"PEP 8 Foundation","text":"<p>All guidelines in this document are in addition to those defined in Python's PEP 8 and PEP 257 guidelines.</p>"},{"location":"contributing/coding-standard/#line-length","title":"Line Length","text":"<p>Too short of lines discourage descriptive variable names where they otherwise make sense. Too long of lines reduce overall readability and make it hard to compare 2 files side by side. There is no perfect number: but for Hug, we've decided to cap the lines at 100 characters.</p>"},{"location":"contributing/coding-standard/#descriptive-variable-names","title":"Descriptive Variable names","text":"<p>Naming things is hard. Hug has a few strict guidelines on the usage of variable names, which hopefully will reduce some of the guesswork:</p> <ul> <li>No one character variable names.</li> <li>Except for x, y, and z as coordinates.</li> <li>It's not okay to override built-in functions.</li> <li>Except for <code>id</code>. Guido himself thought that shouldn't have been moved to the system module. It's too commonly used, and alternatives feel very artificial.</li> <li>Avoid Acronyms, Abbreviations, or any other short forms - unless they are almost universally understand.</li> </ul>"},{"location":"contributing/coding-standard/#adding-new-modules","title":"Adding new modules","text":"<p>New modules added to the a project that follows the HOPE-8 standard should all live directly within the base <code>PROJECT_NAME/</code> directory without nesting. If the modules are meant only for internal use within the project, they should be prefixed with a leading underscore. For example, def _internal_function. Modules should contain a docstring at the top that gives a general explanation of the purpose and then restates the project's use of the MIT license. There should be a <code>tests/test_$MODULE_NAME.py</code> file created to correspond to every new module that contains test coverage for the module. Ideally, tests should be 1:1 (one test object per code object, one test method per code method) to the extent cleanly possible.</p>"},{"location":"contributing/coding-standard/#automated-code-cleaners","title":"Automated Code Cleaners","text":"<p>All code submitted to Hug should be formatted using Black and isort. Black should be run with the line length set to 100, and isort with Black compatible settings in place.</p>"},{"location":"contributing/coding-standard/#automated-code-linting","title":"Automated Code Linting","text":"<p>All code submitted to hug should run through the following tools:</p> <ul> <li>Black and isort verification.</li> <li>Flake8</li> <li>flake8-bugbear</li> <li>Bandit</li> <li>pep8-naming</li> <li>vulture</li> <li>safety</li> </ul>"},{"location":"contributing/contributing-guide/","title":"Contributing to streamdeck linux gui","text":"<p>Looking for a useful open source project to contribute to? Want your contributions to be warmly welcomed and acknowledged? Welcome! You have found the right place.</p>"},{"location":"contributing/contributing-guide/#getting-streamdeck_ui-set-up-for-local-development","title":"Getting streamdeck_ui set up for local development","text":"<p>The first step when contributing to any project is getting it set up on your local machine. streamdeck_ui aims to make this as simple as possible.</p> <p>Account Requirements:</p> <ul> <li>A valid GitHub account</li> </ul> <p>Base System Requirements:</p> <ul> <li>Python 3.8+</li> <li>Poetry</li> <li>Bash or a bash-compatible shell (should be auto-installed on Linux/Mac)</li> </ul> <p>Once you have verified that your system matches the base requirements, you can start getting the project working by following these steps:</p> <ol> <li>Fork the project on GitHub.<ul> <li>Make sure you untick the \"copy the main branch only\" option. This will ensure you have a full copy of the project to work with.</li> </ul> </li> <li>Clone your fork to your local file system:     <code>git clone https://github.com/$GITHUB_ACCOUNT/streamdeck-linux-gui.git</code></li> <li><code>cd streamdeck_ui</code></li> <li><code>poetry install</code></li> </ol>"},{"location":"contributing/contributing-guide/#making-a-contribution","title":"Making a contribution","text":"<p>Congrats! You're now ready to make a contribution! Use the following as a guide to help you reach a successful pull request:</p> <ol> <li>Check the issues page or discussions on GitHub to see if the task you want to complete is listed there.<ul> <li>If it's listed there, write a comment letting others know you are working on it.</li> <li>If it's not listed in GitHub issues or discussions, go ahead and log a new issue. Then add a comment letting everyone know you have it under control.<ul> <li>If you're not sure if it's something that is good for the main streamdeck_ui project and want immediate feedback, you can discuss it on Discord.</li> </ul> </li> </ul> </li> <li>Create an issue branch for your local work <code>git checkout -b issue/$ISSUE-NUMBER origin/main</code>.</li> <li>Do your magic here. You can use <code>poetry run streamdeck</code> to run the application while developing.</li> <li>Try to include tests for your code whenever possible.</li> <li>Ensure your code matches the HOPE-8 Coding Standard used by the project.<ul> <li>You can use the <code>lint.sh</code> script existing in the scripts directory: <code>bash scripts/lint.sh</code>. This will let you know if everything is okay before you commit it.</li> </ul> </li> <li>Ensure all tests pass. You can use the <code>test.sh</code> script inside the scripts directory: <code>bash scripts/test.sh</code>.</li> <li>When committing your changes, please make sure you follow the Angular commit message format.</li> <li>Submit a pull request to the main project repository via GitHub.</li> </ol> <p>Thanks for the contribution! It will be reviewed as soon as possible, and once accepted, your name will be added to the acknowledgments list :).</p>"},{"location":"contributing/contributing-guide/#thank-you","title":"Thank you","text":"<p>I cannot tell you how thankful we are for the hard work done by streamdeck-linux-gui contributors like you.</p> <p>Thank you!</p> <p>The streamdeck-linux-gui users! :heart:</p>"},{"location":"installation/arch/","title":"Installing on Arch","text":"<p>This has been tested on:</p> <ul> <li>Arch with Plasma (July 2023)</li> <li>Arch with Cinnamon (October 2023)</li> <li>Arch with Gnome (Per every release, thanks to dhtseany)</li> <li>Arch with Sway ans wayland</li> </ul>"},{"location":"installation/arch/#aur","title":"AUR","text":"<p>On Arch Linux, its recommended installing from AUR repositorues. there are two AUR packages available:</p> <ol> <li><code>streamdeck-ui</code>: This package targets official and stable releases.</li> <li><code>streamdeck-ui-git</code>: This package targets the git repository's master branch. It provides you with the latest updates but may be unstable at times.</li> </ol> <p>The AUR packages install all the necessary dependencies and udev rules, so you do not need to continue further in this document.</p>"},{"location":"installation/arch/#manual-source-install","title":"Manual / source install","text":""},{"location":"installation/arch/#install-dependencies","title":"Install Dependencies","text":"<pre><code>sudo pacman -S hidapi qt6-base\n</code></pre>"},{"location":"installation/arch/#set-path","title":"Set path","text":"<p>You need to add <code>~/.local/bin</code> to your path. Be sure to add this to your <code>.bashrc</code> (or equivalent) file, so it automatically sets it for you in the future.</p> <pre><code>PATH=$PATH:$HOME/.local/bin\n</code></pre>"},{"location":"installation/arch/#configure-access-to-elgato-devices-udev-rules","title":"Configure access to Elgato devices (udev rules)","text":"<p>The following will create a file called <code>/etc/udev/rules.d/60-streamdeck.rules</code> with all the necessary udev rules that provides your user with access to USB devices created by Elgato.</p> <pre><code>sudo wget https://raw.githubusercontent.com/streamdeck-linux-gui/streamdeck-linux-gui/main/udev/60-streamdeck.rules -O /etc/udev/rules.d/60-streamdeck.rules\n</code></pre> <p>alternatively to grabbing the file directly from the repository you can use the following command:</p> <pre><code>sh -c \"echo -e 'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"0060\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"0063\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"006c\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"006d\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"0080\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'KERNEL==\\\"uinput\\\", SUBSYSTEM==\\\"misc\\\", OPTIONS+=\\\"static_node=uinput\\\", TAG+=\\\"uaccess\\\", GROUP=\\\"input\\\", MODE=\\\"0660\\\"' &gt; /etc/udev/rules.d/60-streamdeck.rules\"\n</code></pre> <p>For the rule to take immediate effect, run the following command:</p> <pre><code>sudo udevadm trigger\n</code></pre> <p>If the software is having problems later to detect the Stream Deck, you can try unplugging/plugging it back in.</p>"},{"location":"installation/arch/#install-streamdeck","title":"Install Streamdeck","text":""},{"location":"installation/arch/#from-pypi-with-pipx","title":"From Pypi with pipx","text":"<pre><code>sudo pacman -S python-pipx\n</code></pre> <pre><code>pipx install  streamdeck-linux-gui\n</code></pre>"},{"location":"installation/arch/#from-source","title":"From Source","text":"<p>Please make sure you have followed Install dependencies and Configure access to Elgato devices before continuing.</p> <p>The steps to install from source can be found here</p>"},{"location":"installation/arch/#launch-the-streamdeck-ui","title":"Launch the Streamdeck UI","text":"<p>Launch with</p> <pre><code>streamdeck\n</code></pre> <p>See troubleshooting for tips if you're stuck.</p>"},{"location":"installation/centos/","title":"Installing on CentOS","text":"<p>This has been tested on CentOS 7, 8.</p>"},{"location":"installation/centos/#install-hidapi","title":"Install hidapi","text":"<pre><code>sudo yum install epel-release\nsudo yum update\nsudo yum install hidapi\n</code></pre> <pre><code>sudo rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n</code></pre> <p>and try the hdapi install again.</p>"},{"location":"installation/centos/#note-for-centos7","title":"Note for CentOS7","text":"<p>If you're having trouble installing hdapi, try installing the epel from the Fedora site as follows:</p>"},{"location":"installation/centos/#install-python-38","title":"Install python 3.8","text":"<p>CentOS 7/8 ships with Python 3.6. We need to build version 3.8 (or later if you prefer).</p> <pre><code>sudo yum -y groupinstall \"Development Tools\"\nsudo yum -y install openssl-devel bzip2-devel libffi-devel\nwget https://www.python.org/ftp/python/3.8.9/Python-3.8.9.tgz\ntar xvf Python-3.8.9.tgz\ncd Python-3.8.9/\n./configure --enable-optimizations\nsudo make altinstall\n</code></pre>"},{"location":"installation/centos/#upgrade-pip","title":"Upgrade pip","text":"<p>You need to upgrade pip, using pip. In my experience, old versions of pip may fail to properly install some of the required Python dependencies.</p> <pre><code>python3.8 -m pip install --upgrade pip\n</code></pre>"},{"location":"installation/centos/#configure-access-to-elgato-devices-udev-rules","title":"Configure access to Elgato devices (udev rules)","text":"<p>The following will create a file called <code>/etc/udev/rules.d/60-streamdeck.rules</code> with all the necessary udev rules that provides your user with access to USB devices created by Elgato.</p> <pre><code>sudo wget https://raw.githubusercontent.com/streamdeck-linux-gui/streamdeck-linux-gui/main/udev/60-streamdeck.rules -O /etc/udev/rules.d/60-streamdeck.rules\n</code></pre> <p>alternatively to grabbing the file directly from the repository you can use the following command:</p> <pre><code>sh -c \"echo -e 'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"0060\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"0063\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"006c\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"006d\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"0080\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'KERNEL==\\\"uinput\\\", SUBSYSTEM==\\\"misc\\\", OPTIONS+=\\\"static_node=uinput\\\", TAG+=\\\"uaccess\\\", GROUP=\\\"input\\\", MODE=\\\"0660\\\"' &gt; /etc/udev/rules.d/60-streamdeck.rules\"\n</code></pre> <p>For the rule to take immediate effect, run the following command:</p> <pre><code>sudo udevadm trigger\n</code></pre> <p>If the software is having problems later to detect the Stream Deck, you can try unplugging/plugging it back in.</p>"},{"location":"installation/centos/#install-stream-deck-ui","title":"Install Stream Deck UI","text":""},{"location":"installation/centos/#from-pypi-with-pip","title":"From Pypi with pip","text":"<pre><code>python3.8 -m pip install streamdeck-linux-gui --user\n</code></pre>"},{"location":"installation/centos/#from-source","title":"From Source","text":"<p>Please make sure you have followed the steps below untill the Install Stream Deck UI section before continuing.</p> <p>The steps to install from source can be found here</p>"},{"location":"installation/centos/#launch-the-streamdeck-ui","title":"Launch the Streamdeck UI","text":"<pre><code>streamdeck\n</code></pre> <p>See troubleshooting for tips if you're stuck.</p>"},{"location":"installation/fedora/","title":"Installing on Fedora","text":"<p>This has been tested on Fedora 36, 37.</p>"},{"location":"installation/fedora/#install-hidapi","title":"Install hidapi","text":"<pre><code>sudo dnf install python3-pip python3-devel hidapi\n</code></pre>"},{"location":"installation/fedora/#upgrade-pip","title":"Upgrade pip","text":"<p>You need to upgrade pip, using pip. In my experience, old versions of pip may fail to properly install some of the required Python dependencies.</p> <pre><code>python -m pip install --upgrade pip\n</code></pre>"},{"location":"installation/fedora/#configure-access-to-elgato-devices-udev-rules","title":"Configure access to Elgato devices (udev rules)","text":"<p>The following will create a file called <code>/etc/udev/rules.d/60-streamdeck.rules</code> with all the necessary udev rules that provides your user with access to USB devices created by Elgato.</p> <pre><code>sudo wget https://raw.githubusercontent.com/streamdeck-linux-gui/streamdeck-linux-gui/main/udev/60-streamdeck.rules -O /etc/udev/rules.d/60-streamdeck.rules\n</code></pre> <p>alternatively to grabbing the file directly from the repository you can use the following command:</p> <pre><code>sh -c \"echo -e 'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"0060\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"0063\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"006c\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"006d\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"0080\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'KERNEL==\\\"uinput\\\", SUBSYSTEM==\\\"misc\\\", OPTIONS+=\\\"static_node=uinput\\\", TAG+=\\\"uaccess\\\", GROUP=\\\"input\\\", MODE=\\\"0660\\\"' &gt; /etc/udev/rules.d/60-streamdeck.rules\"\n</code></pre> <p>For the rule to take immediate effect, run the following command:</p> <pre><code>sudo udevadm trigger\n</code></pre> <p>If the software is having problems later to detect the Stream Deck, you can try unplugging/plugging it back in.</p>"},{"location":"installation/fedora/#install-stream-deck-ui","title":"Install Stream Deck UI","text":""},{"location":"installation/fedora/#from-pypi-with-pip","title":"From Pypi with pip","text":"<pre><code>python -m pip install streamdeck-linux-gui --user\n</code></pre>"},{"location":"installation/fedora/#from-source","title":"From Source","text":"<p>Please make sure you have followed the steps below untill the Install Stream Deck UI section before continuing.</p> <p>The steps to install from source can be found here</p>"},{"location":"installation/fedora/#launch-the-streamdeck-ui","title":"Launch the Streamdeck UI","text":"<p>Launch with</p> <pre><code>streamdeck\n</code></pre> <p>See system tray installation.</p> <p>See troubleshooting for tips if you're stuck.</p>"},{"location":"installation/nixos/","title":"Installing on NixOS","text":"<p>See also the Stream Deck page on the NixOS Wiki.</p>"},{"location":"installation/nixos/#nixos-module","title":"NixOS module","text":"<p>This is the preferred method so that udev rules are automatically set up.</p> <pre><code>{\n  programs.streamdeck-ui = {\n    enable = true;\n    autoStart = true; # optional\n  };\n}\n</code></pre>"},{"location":"installation/nixos/#nix-package","title":"Nix package","text":"<p>If you are using Nix on a distribution other than NixOS, you can use the <code>streamdeck-ui</code> package from <code>nixpkgs</code>.</p> <p>The package contains udev rules at <code>/nix/store/&lt;package-path&gt;/etc/udev/rules.d/70-streamdeck.rules</code>. These rules must be enabled for your user to access Elgato USB devices.</p>"},{"location":"installation/opensuse/","title":"Installing on openSUSE","text":"<p>This has been tested on Tumbleweed.</p>"},{"location":"installation/opensuse/#install-hidapi","title":"Install hidapi","text":"<pre><code>sudo zypper install libhidapi-libusb0 python312-devel kernel-devel python311-evdev\n</code></pre> <p><code>python310-devel</code> and <code>kernel-devel</code> are required because pip is going to have to build <code>evdev</code>.</p>"},{"location":"installation/opensuse/#upgrade-pip","title":"Upgrade pip","text":"<p>You may need to upgrade pip, using pip.</p> <pre><code>python3 -m pip install --upgrade pip\n</code></pre>"},{"location":"installation/opensuse/#configure-access-to-elgato-devices-udev-rules","title":"Configure access to Elgato devices (udev rules)","text":"<p>The following will create a file called <code>/etc/udev/rules.d/60-streamdeck.rules</code> with all the necessary udev rules that provides your user with access to USB devices created by Elgato.</p> <pre><code>sudo wget https://raw.githubusercontent.com/streamdeck-linux-gui/streamdeck-linux-gui/main/udev/60-streamdeck.rules -O /etc/udev/rules.d/60-streamdeck.rules\n</code></pre> <p>alternatively to grabbing the file directly from the repository you can use the following command:</p> <pre><code>sh -c \"echo -e 'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"0060\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"0063\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"006c\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"006d\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"0080\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'KERNEL==\\\"uinput\\\", SUBSYSTEM==\\\"misc\\\", OPTIONS+=\\\"static_node=uinput\\\", TAG+=\\\"uaccess\\\", GROUP=\\\"input\\\", MODE=\\\"0660\\\"' &gt; /etc/udev/rules.d/60-streamdeck.rules\"\n</code></pre> <p>For the rule to take immediate effect, run the following command:</p> <pre><code>sudo udevadm trigger\n</code></pre> <p>If the software is having problems later to detect the Stream Deck, you can try unplugging/plugging it back in.</p>"},{"location":"installation/opensuse/#install-stream-deck-ui","title":"Install Stream Deck UI","text":""},{"location":"installation/opensuse/#from-pypi-with-pip","title":"From Pypi with pip","text":"<pre><code>python3 -m pip install streamdeck-linux-gui --user\n</code></pre>"},{"location":"installation/opensuse/#from-source","title":"From Source","text":"<p>Please make sure you have followed the steps below untill the Install Stream Deck UI section before continuing.</p> <p>The steps to install from source can be found here</p>"},{"location":"installation/opensuse/#launch-the-streamdeck-ui","title":"Launch the Streamdeck UI","text":"<p>Launch with</p> <pre><code>streamdeck\n</code></pre> <p>See system tray installation.</p> <p>See troubleshooting for tips if you're stuck.</p>"},{"location":"installation/source/","title":"Installation from Source","text":"<p>To install from source, you first need to install the dependencies and configure the udev rules (access to Elgato devices) according to your distribution guide.</p>"},{"location":"installation/source/#follow-the-steps-below-to-install-the-application-from-source","title":"Follow the steps below to install the application from source","text":"<p>Clone the repository:</p> <pre><code>git clone &lt;https://github.com/streamdeck-linux-gui/streamdeck-linux-gui.git&gt;\n</code></pre> <p>Change to the directory:</p> <pre><code>cd streamdeck-linux-gui\n</code></pre> <p>Build the package using the following command:</p> <pre><code>python -m build --wheel --no-isolation\n</code></pre> <p>Install the package on the system:</p> <pre><code>python -m installer -p $HOME/.local dist/*.whl\n</code></pre> <p>Execute the application:</p> <pre><code>streamdeck\n</code></pre>"},{"location":"installation/source/#uninstall","title":"Uninstall","text":""},{"location":"installation/source/#follow-the-steps-below-to-uninstall-the-application","title":"Follow the steps below to uninstall the application","text":"<p>Remove the application:</p> <pre><code>rm -rf $HOME/.local/bin/streamdeck\n</code></pre> <p>Remove the libraries:</p> <pre><code>rm -rf $HOME/.local/lib/${PYTHON_VERSION}/site-packages/streamdeck_*\n</code></pre> <p>where ${PYTHON_VERSION} is the Python version that you used to install the application.</p>"},{"location":"installation/systemd/","title":"systemd installation","text":"<p>Once you have a working streamdeck-linux-gui installation, you can also configure it to run as a systemd user service. It will automatically run when you login and you can manage it using <code>systemctl</code>.</p>"},{"location":"installation/systemd/#installation","title":"Installation","text":"<p>Make a directory where the systemd user configuration will be stored.</p> <pre><code>mkdir -p $HOME/.local/share/systemd/user/\n</code></pre> <p>Create (an empty) configuration file.</p> <pre><code>touch $HOME/.local/share/systemd/user/streamdeck.service\n</code></pre> <p>Use your favorite editor and paste the following content into the <code>streamdeck.service</code> file (rembember replace <code>&lt;yourusername&gt;</code>):</p> <pre><code>[Unit]\nDescription=A Linux compatible UI for the Elgato Stream Deck.\n\n[Service]\nType=simple\nExecStart=/home/&lt;yourusername&gt;/.local/bin/streamdeck -n\nRestart=on-failure\n\n[Install]\nWantedBy=default.target\n</code></pre> <p>To make the configuration take effect and install the service into systemd, run the following commands:</p> <pre><code>systemctl --user daemon-reload\nsystemctl --user enable streamdeck\n</code></pre> <p>Tip: Before you continue, make sure you are not already running streamdeck-linux-gui. If it's open, click File &gt; Exit. Only one instance of streamdeck-linux-gui can be running at a time.</p> <p>You are now all set. To start the service, run the following command:</p> <pre><code>systemctl --user start streamdeck\n</code></pre> <p>There are some additional commands that may be useful.</p> <p>To see the status of the service, run:</p> <pre><code>systemctl --user status streamdeck\n</code></pre> <p>To review the service log file (newest entries at the top) for troubleshooting, run:</p> <pre><code>journalctl --user -r\n</code></pre> <p>To stop the service, run:</p> <pre><code>systemctl --user stop streamdeck\n</code></pre>"},{"location":"installation/systemd/#installation-in-virtual-environment","title":"Installation in virtual environment","text":"<p>If you have installed streamdeck-linux-gui in a virtual environment, you can still use it in a systemd service.</p> <p>Assume you are in the following directory:</p> <pre><code>/home/johnsmith/streamdeck-linux-gui\n</code></pre> <p>You create a virtual environment, called <code>.venv</code> and activate it as follows:</p> <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\n</code></pre> <p>and finally install streamdeck-linux-gui like this:</p> <pre><code>python3 -m pip install streamdeck-linux-gui\n</code></pre> <p>Your virtual environment is now configured and located in <code>/home/johnsmith/streamdeck-linux-gui/.venv</code></p> <p>The steps for installing the systemd service is exactly the same. The only difference is you have to point the <code>ExecStart=</code> to the streamdeck executable inside the virtual environment, like so:</p> <pre><code>ExecStart=/home/johnsmith/streamdeck-linux-gui/.venv/bin/streamdeck -n\n</code></pre>"},{"location":"installation/systemd/#uninstalling","title":"Uninstalling","text":"<p>The following steps will stop, disable, remove the configuration file and finally reload the settings:</p> <pre><code>systemctl --user stop streamdeck\nsystemctl --user disable streamdeck\nrm $HOME/.local/share/systemd/user/streamdeck.service\nsystemctl --user daemon-reload\n</code></pre>"},{"location":"installation/ubuntu/","title":"Installing on Debian and ubuntu derivatives","text":"<p>This has been tested on Debian 12</p>"},{"location":"installation/ubuntu/#install-hidapi-and-pipx","title":"Install hidapi and pipx","text":"<pre><code>sudo apt install libhidapi-libusb0 pipx\n</code></pre> <p>Note that for version <code>2.0.6</code> and below, you also need to install <code>libxcb-xinerama0</code> (include it with apt in the line above).</p>"},{"location":"installation/ubuntu/#set-path","title":"Set path","text":"<p>You need to add <code>~/.local/bin</code> to your path. Be sure to add this to your <code>.bashrc</code> (or equivalent) file so it automatically sets it for you in future.</p> <pre><code>PATH=$PATH:$HOME/.local/bin\n</code></pre>"},{"location":"installation/ubuntu/#configure-access-to-elgato-devices-udev-rules","title":"Configure access to Elgato devices (udev rules)","text":"<p>The following will create a file called <code>/etc/udev/rules.d/60-streamdeck.rules</code> with all the necessary udev rules that provides your user with access to USB devices created by Elgato.</p> <pre><code>sudo wget https://raw.githubusercontent.com/streamdeck-linux-gui/streamdeck-linux-gui/main/udev/60-streamdeck.rules -O /etc/udev/rules.d/60-streamdeck.rules\n</code></pre> <p>alternatively to grabbing the file directly from the repository you can use the following command:</p> <pre><code>sh -c \"echo -e 'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"0060\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"0063\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"006c\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"006d\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", ATTRS{idProduct}==\\\"0080\\\", TAG+=\\\"uaccess\\\"\\\\n'\\\n'KERNEL==\\\"uinput\\\", SUBSYSTEM==\\\"misc\\\", OPTIONS+=\\\"static_node=uinput\\\", TAG+=\\\"uaccess\\\", GROUP=\\\"input\\\", MODE=\\\"0660\\\"' &gt; /etc/udev/rules.d/60-streamdeck.rules\"\n</code></pre> <p>For the rule to take immediate effect, run the following command:</p> <pre><code>sudo udevadm trigger\n</code></pre> <p>If the software is having problems later to detect the Stream Deck, you can try unplugging/plugging it back in.</p>"},{"location":"installation/ubuntu/#install-stream-deck-ui","title":"Install Stream Deck UI","text":""},{"location":"installation/ubuntu/#from-pypi-with-pipx","title":"From Pypi with pipx","text":"<pre><code>python3 -m pipx install streamdeck-linux-gui\n</code></pre>"},{"location":"installation/ubuntu/#from-source","title":"From Source","text":"<p>Please make sure you have followed the steps below untill the Install Stream Deck UI section before continuing.</p> <p>The steps to install from source can be found here</p>"},{"location":"installation/ubuntu/#launch-the-streamdeck-ui","title":"Launch the Streamdeck UI","text":"<p>Launch with</p> <pre><code>streamdeck\n</code></pre> <p>See troubleshooting for tips if you're stuck.</p>"}]}